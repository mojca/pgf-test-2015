extern "C" {
#include <lauxlib.h>
}

#include <cstdlib>

$includes{}

#include <pgf/gd/ogdf/c/AlgorithmBase.h>
#include <pgf/gd/ogdf/c/ModuleManager.h>

using namespace pgf;
using namespace ogdf;


$functions{
static int $function_name{} (lua_State *L) {
  
  struct Algorithm : AlgorithmBase {
    Algorithm(GraphBridged& gb) : AlgorithmBase (gb) {}

    void run (lua_State* lua_state) {
      srand(static_cast<int>(number_option("random seed")));
$function_body{}
    }
  };

  
  GraphBridged graph_bridge (L);
  
  Algorithm algo(graph_bridge);
  algo.run(L);
  
  graph_bridge.unbridgeGraph(L);
  
  return 0;
}
}


$factories{
static $factory_base{}* $factory_name{} (AlgorithmBase& algo) {
$factory_code{}
}
}

static const struct luaL_reg registry [] = {
$functions_registry{  {"$function_name{}", $function_name{}},}
  {NULL, NULL}  // sentinel
};

extern "C" {
int luaopen_$library_c_name{} (lua_State *L) {
  luaL_register(L, "$library_name{}", registry);
$factories_registry{  ModuleManager::registerFactory<$factory_base{}>("$factory_base{}","$factory_class{}",$factory_name{});}
  return 1;
}
}
